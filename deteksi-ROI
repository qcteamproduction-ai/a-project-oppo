import cv2
from ultralytics import YOLO

# Load models
model_screen = YOLO('path/to/screen_best.pt')  # Model deteksi layar
model_bubble = YOLO('path/to/bubble_best.pt')  # Model deteksi gelembung

# Kamera (ganti 0 dengan RTSP URL jika IP camera)
cap = cv2.VideoCapture(0)  # Atau 'rtsp://ip_camera_url'
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
cap.set(cv2.CAP_PROP_FPS, 30)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    # Stage 1: Deteksi layar
    results_screen = model_screen(frame, conf=0.5)  # Confidence threshold
    for r in results_screen:
        boxes = r.boxes
        if len(boxes) > 0:  # Ada layar terdeteksi
            # Ambil bbox pertama (asumsi satu HP per frame)
            x1, y1, x2, y2 = boxes[0].xyxy[0].cpu().numpy()
            # Crop ROI layar
            roi = frame[int(y1):int(y2), int(x1):int(x2)]
            
            # Stage 2: Deteksi gelembung di ROI
            results_bubble = model_bubble(roi, conf=0.5)
            for rb in results_bubble:
                bubbles = rb.boxes
                if len(bubbles) > 0:
                    print(f"Gelembung terdeteksi! Jumlah: {len(bubbles)}")
                    # Draw bounding box di frame asli
                    for box in bubbles:
                        bx1, by1, bx2, by2 = box.xyxy[0].cpu().numpy()
                        cv2.rectangle(frame, (int(x1 + bx1), int(y1 + by1)), 
                                      (int(x1 + bx2), int(y1 + by2)), (0, 0, 255), 2)
                    # Alert: Kirim signal ke PLC conveyor atau simpan log
                    # misal: os.system("stop_conveyor.sh")
    
    # Tampilkan frame (untuk debug)
    annotated_frame = results_screen[0].plot()  # Gambar bbox layar
    cv2.imshow('Detection', annotated_frame)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
